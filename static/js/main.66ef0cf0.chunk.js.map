{"version":3,"sources":["images sync /^/.//project.*/.png$","images/project0.png","images/project1.png","images/project2.png","components/NavBar.tsx","components/Card.tsx","components/Projects.tsx","components/Bio.tsx","pages/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","NavBar","className","Card","this","props","projectNumber","href","url","name","noDash","split","join","toUpperCase","slice","repoNameFormat","src","require","alt","description","React","Projects","projectItems","projects","filter","project","i","html_url","key","Bio","Main","useState","data","setData","useEffect","a","fetch","list","json","repos","fetchRepos","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAAA,IAAIA,EAAM,CACT,iBAAkB,GAClB,iBAAkB,GAClB,iBAAkB,IAInB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCxBpBU,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gGCEpC,SAASC,IACZ,OACI,uBAAKC,UAAU,SACX,uBAAKA,UAAU,WAAf,mB,sECHSC,E,iLASb,OACI,uBAAKD,UAAW,eAAiBE,KAAKC,MAAMC,eACxC,4BAEA,uBAAKJ,UAAU,eACX,qBAAGA,UAAU,YAAYK,KAAMH,KAAKC,MAAMG,KAXtD,SAAwBC,GACpB,IAAIC,EAASD,EAAKE,MAAM,KAAKC,KAAK,KAElC,OADoBF,EAAOC,MAAM,IAAK,GAAGE,cAAiBH,EAAOI,MAAM,GASfC,CAAeX,KAAKC,MAAMI,QAE9E,uBAAKP,UAAU,WAAWc,IAAKC,MAAQ,YAAsBb,KAAKC,MAAMC,cAAgB,QAASY,IAAI,YACrG,uBAAKhB,UAAU,aACVE,KAAKC,MAAMc,kB,GAlBEC,aCCrBC,EAAb,iLAGQ,IAAIC,EAAelB,KAAKC,MAAMkB,SAASC,QAAO,SAACC,EAAcC,GAAf,OACnC,IAANA,GAAiB,IAANA,GAAiB,IAANA,KACzBxC,KAAI,SAACuC,EAAcC,GACjB,OACI,gBAAC,EAAD,CAAMjB,KAAMgB,EAAQhB,KAChBD,IAAKiB,EAAQE,SACbR,YAAaM,EAAQN,YACrBb,cAAeoB,EACfE,IAAKF,OAIjB,OACI,2BACI,uBAAKxB,UAAU,QACX,uBAAKA,UAAU,8BACX,uBAAKA,UAAU,WAAf,qBAIJ,uBAAKA,UAAU,6BACVoB,SAxBzB,GAA8BF,aCDvB,SAASS,IACZ,OACI,uBAAK3B,UAAU,oBACX,uBAAKA,UAAU,uBACX,uBAAKA,UAAU,mBACX,uBAAKA,UAAU,UAAUc,IAAI,wDAAwDE,IAAI,YAE7F,qBAAGhB,UAAU,YAAb,kOCJT,IAAM4B,EAAO,WAAO,IAAD,EAEEC,mBAAS,IAFX,mBAEfC,EAFe,KAETC,EAFS,KAYtB,OARAC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,6EADV,cACTC,EADS,gBAEKA,EAAKC,OAFV,OAETC,EAFS,OAGfN,EAAQM,GAHO,2CAAH,qDAKhBC,KACD,IAEC,2BACI,gBAACX,EAAD,MACA,gBAAC,EAAD,CAAUN,SAAUS,M,MCNjBS,MATf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAACD,EAAD,MACA,kBAAC,EAAD,QCGcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66ef0cf0.chunk.js","sourcesContent":["var map = {\n\t\"./project0.png\": 19,\n\t\"./project1.png\": 20,\n\t\"./project2.png\": 21\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/project0.a044935b.png\";","module.exports = __webpack_public_path__ + \"static/media/project1.fbde7378.png\";","module.exports = __webpack_public_path__ + \"static/media/project2.b5388a7d.png\";","import * as React from \"react\";\n\nexport function NavBar() {\n    return (\n        <div className=\"title\">\n            <div className=\"content\">\n                Barry A. Ervin\n            </div>\n        </div>\n    )\n}","import * as React from \"react\";\n\nexport default class Card extends React.Component<{ name: string; key: number; description: string; projectNumber: number; url: string }>{\n    render() {\n\n        function repoNameFormat(name: string) {\n            let noDash = name.split(\"-\").join(\" \")\n            let caseCorrect = ((noDash.split(''))[0].toUpperCase()) + noDash.slice(1)\n            return caseCorrect;\n        }\n\n        return (\n            <div className={\"card project\" + this.props.projectNumber}>\n                <div>\n                </div>\n                <div className=\"card-header\">\n                    <a className=\"card-link\" href={this.props.url}>{repoNameFormat(this.props.name)}</a>\n                </div>\n                <img className=\"card-img\" src={require('../images/project' + this.props.projectNumber + \".png\")} alt=\"project\" />\n                <div className=\"card-text\">\n                    {this.props.description}\n                </div>\n            </div>\n\n        )\n    }\n}","import * as React from \"react\";\nimport Card from \"./Card\"\n\nexport class Projects extends React.Component<{ projects: any[] }> {\n    render() {\n\n        let projectItems = this.props.projects.filter((project: any, i: number) =>\n            (i === 1 || i === 3 || i === 4)\n        ).map((project: any, i: number) => {\n            return (\n                <Card name={project.name}\n                    url={project.html_url}\n                    description={project.description}\n                    projectNumber={i}\n                    key={i} />\n            )\n        });\n\n        return (\n            <div>\n                <div className=\"main\">\n                    <div className=\"theme sectionHeader accent\">\n                        <div className=\"content\">\n                            Recent Projects:\n                        </div>\n                    </div>\n                    <div className=\"projectsContainer content\">\n                        {projectItems}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\n\nexport function Bio() {\n    return (\n        <div className=\"bio theme accent\">\n            <div className=\"bio-content content\">\n                <div className=\"image-container\">\n                    <img className=\"bio-img\" src=\"https://avatars2.githubusercontent.com/u/55558517?v=4\" alt=\"Avatar\" />\n                </div>\n                <p className=\"bio-text\">I am a Full Stack Web Developer creating inspired web-apps using React, JavaScript, and Node. I love quickly adapting to interesting situations involving rapidly changing technology. Let's build something great together.</p>\n            </div>\n        </div >\n    )\n} ","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Projects } from \"../components/Projects\"\nimport { Bio } from \"../components/Bio\"\n\nexport const Main = () => {\n\n    const [data, setData] = useState([])\n    const gitHubParams: string = \"visibility=public&sort=created\"\n    useEffect(() => {\n        const fetchRepos = async () => {\n            const list = await fetch(\"https://api.github.com/users/barryae/repos?\" + gitHubParams);\n            const repos = await list.json();\n            setData(repos)\n        }\n        fetchRepos()\n    }, []);\n    return (\n        <div >\n            <Bio />\n            <Projects projects={data} />\n        </div>\n    )\n}","import React from 'react';\nimport { NavBar } from './components/NavBar'\nimport { Main } from './pages/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}